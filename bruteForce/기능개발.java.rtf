{\rtf1\ansi\ansicpg949\cocoartf2577
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset129 AppleSDGothicNeo-Regular;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 //
\f1 \'b0\'e1\'b7\'d0\'c0\'ba
\f0  
\f1 \'b0\'e8\'bc\'d3
\f0  
\f1 \'b4\'f5\'c7\'cf\'b0\'ed
\f0  
\f1 \'c0\'d6\'b4\'d9\'b0\'a1
\f0  
\f1 \'be\'d5\'bf\'a1
\f0  
\f1 \'b9\'e8\'c6\'f7\'b5\'c9\'b6\'a7
\f0  
\f1 \'b5\'c8\'b0\'c5
\f0  
\f1 \'c5\'d0\'b0\'ed
\f0  
\f1 \'be\'c8\'b5\'c8\'b0\'c5
\f0  
\f1 \'c0\'d6\'c0\'b8\'b8\'e9
\f0  
\f1 \'b8\'d8\'c3\'df\'b0\'ed
\f0  ! 
\f1 \'c0\'cc\'b0\'c9
\f0  
\f1 \'b9\'e8\'bf\'ad\'b7\'ce
\f0  
\f1 \'be\'ee\'c4\'b3
\f0  
\f1 \'c7\'a5\'c7\'f6\'c7\'d4\'b4\'e3
\f0  .....ArrayList 
\f1 \'bd\'e1\'be\'df\'b0\'d9\'b4\'d9
\f0 \
//
\f1 \'be\'c6\'b4\'cf\'be\'fa\'b4\'d9
\f0  .. . 
\f1 \'b3\'af\'c2\'a5\'b8\'a6
\f0  
\f1 \'c1\'f7\'c1\'a2
\f0  
\f1 \'b0\'e8\'bb\'ea\'c7\'d8\'bc\'ad
\f0  
\f1 \'b9\'e8\'bf\'ad\'c0\'bb
\f0  
\f1 \'b8\'b8\'b5\'e7\'b4\'d9\'c0\'bd
\f0  
\f1 \'b5\'da\'bf\'a1\'bc\'ad
\f0  
\f1 \'b5\'b9\'b7\'c1\'be\'df
\f0  
\f1 \'c7\'cf\'b4\'c2
\f0  
\f1 \'b5\'ed
\f0  ..\
//
\f1 \'b8\'b7\'c8\'f7\'b8\'e9
\f0  
\f1 \'b2\'c0
\f0  
\f1 \'b4\'f5
\f0  
\f1 \'b3\'aa\'c0\'ba
\f0  
\f1 \'c7\'ae\'c0\'cc\'b0\'a1
\f0  
\f1 \'be\'f8\'b4\'c2\'c1\'f6
\f0  
\f1 \'b0\'ed\'b9\'ce\'c7\'d2
\f0  
\f1 \'b0\'cd
\f0 \
\
import java.util.*;\
\
class Solution \{\
    public int[] solution(int[] progresses, int[] speeds) \{\
        int[] answer = \{\};\
        Queue<Integer> q = new LinkedList<>();\
        ArrayList<Integer> answer_list = new ArrayList<>();\
        \
        for(int i=0; i<progresses.length; i++) \{\
            int day = (100 - progresses[i]) % speeds[i] == 0 ?\
                      (100 - progresses[i]) / speeds[i] :\
                      (100 - progresses[i]) / speeds[i] + 1;\
            q.add(day);\
        \}\
        \
        int count = 1;\
        int fore = q.poll();\
        \
         while(q.size() != 0) \{\
//       
\f1 \'b8\'c7\'be\'d5\'bf\'a1
\f0  
\f1 \'c0\'d6\'b4\'c2\'b0\'c5
\f0  
\f1 \'bb\'a9\'b0\'ed
\f0  
\f1 \'b1\'d7\'b0\'c5\'ba\'b8\'b4\'d9
\f0  
\f1 \'c0\'db\'c0\'ba\'be\'d6\'b5\'e9
\f0  
\f1 \'bb\'a9\'b0\'ed
\f0  
\f1 \'c5\'ab
\f0  
\f1 \'be\'d6
\f0  
\f1 \'b3\'aa\'bf\'c0\'b8\'e9
\f0  
\f1 \'b4\'d9\'c0\'bd
\f0  
\f1 \'c5\'d2\'c0\'b8\'b7\'ce
\f0  
\f1 \'b3\'d1\'b1\'e8
\f0 \
             int cur = q.poll();\
             \
             if(cur <= fore) \{\
                 count++;\
             \} else \{\
                 answer_list.add(count);\
                 fore = cur;\
                 count = 1;\
             \}\
            \
         \}\
        \
         answer_list.add(count);\
        \
        \
        answer = answer_list.stream().mapToInt(i->i).toArray();\
        return answer;\
    \}\
\}}